#ADDING ONLINE STOP WORDS TO THE EXISTING NLTK LIBRARY
#THIS PART IS CONSTANT FOR EVERY SENTIMENT ANALYSIS, THEREFORE IT IS IN THE MAIN METHOD
my_file = open("online stopwords.txt", "r")
new_sw = my_file.read()  
# replacing end splitting the text 
# when newline ('\n') is seen.
newSw_list = new_sw.split("\n")
my_file.close() 
import nltk 
from nltk.corpus import stopwords
nltk.download('stopwords')
nltk.download('omw-1.4')
nltk_stop_words = stopwords.words('english')
#print(nltk_stop_words) #lists of stop words in nltk package
final_stopword_list=nltk_stop_words + newSw_list

#Sentiment Analysis
def SentimentAnalysis(country):
    file_name="Articles/"+country+".txt"
    #READING THE TXT FILE
    with open (file_name,"r",encoding="utf-8") as file:
        article=file.read().lower()
        #print(var)
        file.close()
        pass

    #DATA CLEANING

    #CREATE TEXTBLOB & SENTIMENT ANALYSIS
    from textblob import TextBlob
    blob=TextBlob(article)
    #print(blob)

    #REMOVE & COUNTING STOPWORDS
    stopword_freq=0
    clean_data_1="" #store string with removed stopwords
    for word in blob.words:
        
        if word in final_stopword_list:
            stopword_freq+=1
            
        else:
            clean_data_1+=" "+word
        
    #removing punctuations
    punctuation= '''!()-[]{};:'"\, <>./?@#$%^&*_~'''
    for x in punctuation:
        clean_data_1=clean_data_1.replace(x," ")

    #SENTIMENT ANALYSIS
    cleanblob=TextBlob(clean_data_1)
    print("\n",country)
    #print("Overall Sentiment: ",round(cleanblob.sentiment.polarity,2)) # -1 negative, 0 neutral, +1 positive; 0 objective, 1 subjective
    #print(cleanblob)
    #COUNTING POSITIVE & NEGATIVE WORDS
    print("No of Stop Words: ",stopword_freq)
    pos_count=0; neg_count=0
    pos_words_list=[]
    neg_words_list=[]
    for word in cleanblob.words:
        if TextBlob(word).sentiment.polarity>0 and TextBlob(word) not in pos_words_list:
            pos_count+=1
            pos_words_list.append(word) #for storing the words
        
        if TextBlob(word).sentiment.polarity<0 and TextBlob(word) not in neg_words_list:
            neg_count+=1
            neg_words_list.append(word) #list to avoid counting the same word again

    #POSITIVE & NEGATIVE %
    pos_percent=round((pos_count*100)/(pos_count+neg_count),2)
    neg_percent=round(100-pos_percent,2)
    print("No of Positive Words: ",pos_count,"(",pos_percent,"%)")
    #print(pos_words_list)
    print("No of Negative Words: ",neg_count,"(",neg_percent,"%)")
    #print(neg_words_list)

    return round(cleanblob.sentiment.polarity,2)

#plot method
def plotChart(country,score):
    import plotly.graph_objects as go
    fig = go.Figure(
            data=[go.Bar(x=country, y=[score[0],score[1],score[2],score[3],score[4]])],
            layout=go.Layout(
                title=go.layout.Title(text="The Sentiment of Countries")
            )
        )

    fig.show()

### DRIVER CODE ####
Countries=["Great Britain","New Zealand","Japan","Singapore","Saudi Arabia"]
Scores=[]
for country in Countries:
    Scores.append(SentimentAnalysis(country))

#print(Scores)
plotChart(Countries,Scores)

###PROBLEM 3######
from matplotlib import pyplot as plt
TotalScore = 0
"""
(in meters)
GB: 6611507
NZ: 3943375
JP: 12538639
SG: 203107
SA: 3923258"""

Cost = [6611507,3943375,12538639,203107,3923258]
TotalCost = 0
Probability = []

for ele in range (0, len(Scores)):
    TotalScore = TotalScore + Scores[ele]

for ele in range (0, len(Cost)):
    TotalCost = TotalCost + Cost[ele]

for x in range (0, len(Countries)):
    Probability.append((Scores[x]/TotalScore) * (1-(Cost[x]/TotalCost)))

print ("Calculated Probability: ")

for x in range (0, len(Countries)):
    print(Countries[x] + ' = ', round(Probability[x],4))

# getMax method
def getMax(array_A):
    max = array_A[0]
    for i in range(len(array_A)):
        if array_A[i] > max:
            max = array_A[i]

    return max


def shellSort(A, n):
    # set the initial gap to floor of n/2
    gap = n // 2

    # Rearrange the array elements at n/2, n/4, ..., 1 intervals
    while gap > 0:

        for i in range(gap, n):
            temp = A[i]
            j = i

            while j >= gap and A[j - gap] < temp:
                A[j] = A[j - gap]

                j -= gap

            A[j] = temp
        gap //= 2


arr = Probability.copy()
shellSort(arr, len(arr))
print('\nSorted Probability: ')

for x in range (0, len(arr)):
    print(x+1,'->', round(arr[x],4))

Sorted_Sequence_of_Country = []

for x in range(0, len(arr)):
    for y in range(0, len(Probability)):
        if arr[x] == Probability[y]:
            Sorted_Sequence_of_Country.append(y)

print("\nCountries Ranking:")

for x in range (0, len(Sorted_Sequence_of_Country)):
    print(x+1,'->', Countries[Sorted_Sequence_of_Country[x]])

def plotPie():
    mylabels = ["Great Britain","New Zealand","Japan","Singapore","Saudi Arabia"]
    y = [Probability[0],Probability[1],Probability[2],Probability[3],Probability[4]]
    plt.pie(y, labels=mylabels, explode=[0, 0.2, 0, 0, 0], shadow=True, autopct=lambda p: '{:.2f}%'.format(p), startangle = 180)
    plt.title("Probability of Selecting Country to Expand Business")
    plt.show()

plotPie()